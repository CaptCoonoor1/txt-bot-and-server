//Tests for the application component

//Dependencies
const assert = require('assert');
const application = require('../src/application');
const data = require('../src/data');

//New application tests

describe('application', function(){
  it('saves new application', function(done) {
    let input = {
      mc_ign: 'The__TxT',
      discord_id: '293029505457586176',
      email_address: 'bogus@nonexistent.eu',
      country: 'Germany',
      birth_month: 2,
      birth_year: 2000,
      about_me: 'This got generated by automating testing',
      motivation: 'I just want to test if everything works properly',
      build_images: 'None, as Im a computer',
      publish_about_me: true,
      publish_age: true,
      publish_country: true,
      accept_privacy_policy: true,
      accept_rules: true
    };
    application.save(input, false, function(status, res) {
      assert.equal(status, 201);
      emitter.once('data_testing_new', (_input, _type, _options) => {
        assert.equal(input.about_me, _input.about_me);
        assert.equal(input.birth_year, _input.birth_year);
        assert.equal(input.discord_id, _input.discord_id);
        assert.equal(input.country, _input.country);

        done();
      });
    });
  });

  it('saves new application when the same discord account got denied already', function(done) {
    data.delete({}, 'application', false, function(err) {
      let input = {
        mc_ign: 'The__TxT',
        discord_id: '293029505457586176',
        email_address: 'bogus@nonexistent.eu',
        country: 'Germany',
        birth_month: 2,
        birth_year: 2000,
        about_me: 'This got generated by automating testing',
        motivation: 'I just want to test if everything works properly',
        build_images: 'None, as Im a computer',
        publish_about_me: true,
        publish_age: true,
        publish_country: true,
        accept_privacy_policy: true,
        accept_rules: true
      };
      application.save(input, false, function(status, res) {
        application.save({id: 1, status: 2, reason: 'no'}, false, function(status, res) {
          application.save(input, false, function(status, res) {
            assert.equal(status, 201);
            done();
          });
        });
      });
    });
  });

  it('dont save new application when discord account has a pending application', function(done) {
    data.delete({}, 'application', false, function(err) {
      let input = {
        mc_ign: 'The__TxT',
        discord_id: '293029505457586176',
        email_address: 'bogus@nonexistent.eu',
        country: 'Germany',
        birth_month: 2,
        birth_year: 2000,
        about_me: 'This got generated by automating testing',
        motivation: 'I just want to test if everything works properly',
        build_images: 'None, as Im a computer',
        publish_about_me: true,
        publish_age: true,
        publish_country: true,
        accept_privacy_policy: true,
        accept_rules: true
      };
      application.save(input, false, function(status, res) {
        input.discord_id = '212826594123710464';
        application.save(input, false, function(status, res) {
          assert.notEqual(status, 201);
          done();
        });
      });
    });
  });

  it('dont save new application when minecraft nick has a pending application', function(done) {
    data.delete({}, 'application', false, function(err) {
      let input = {
        mc_ign: 'The__TxT',
        discord_id: '293029505457586176',
        email_address: 'bogus@nonexistent.eu',
        country: 'Germany',
        birth_month: 2,
        birth_year: 2000,
        about_me: 'This got generated by automating testing',
        motivation: 'I just want to test if everything works properly',
        build_images: 'None, as Im a computer',
        publish_about_me: true,
        publish_age: true,
        publish_country: true,
        accept_privacy_policy: true,
        accept_rules: true
      };
      application.save(input, false, function(status, res) {
        input.mc_ign = 'ExxPlore';
        application.save(input, false, function(status, res) {
          assert.notEqual(status, 201);
          done();
        });
      });
    });
  });

  it('dont save new application when user has an accepted application', function(done) {
    data.delete({}, 'application', false, function(err) {
      let input = {
        mc_ign: 'The__TxT',
        discord_id: '293029505457586175', //Non existent discord_id, as we dont want to trigger the accept_worklow
        email_address: 'bogus@nonexistent.eu',
        country: 'Germany',
        birth_month: 2,
        birth_year: 2000,
        about_me: 'This got generated by automating testing',
        motivation: 'I just want to test if everything works properly',
        build_images: 'None, as Im a computer',
        publish_about_me: true,
        publish_age: true,
        publish_country: true,
        accept_privacy_policy: true,
        accept_rules: true
      };
      application.save(input, false, function(status, res) {
        application.save({id: 1, status: 3, reason: 'no'}, false, function(status, res) {
          application.save(input, false, function(status, res) {
            assert.notEqual(status, 201);
            done();
          });
        });
      });
    });
  });

  //Read application tests
  it('read all applications when no filter is given', function(done) {
    application.get(false, false, function(err, docs) {
      assert.ok(!err);
      assert.ok(docs.length > 0);
      done();
    });
  });

  it('read specific application by id', function(done) {
    application.get({id: 1}, {first: true}, function(err, doc) {
      assert.ok(!err);
      assert.ok(!Array.isArray(doc));
      done();
    });
  });

  it('read specific application by discord_id', function(done) {
    application.get({discord_id: '293029505457586175'}, {first: true}, function(err, doc) {
      assert.ok(!err);
      assert.ok(!Array.isArray(doc));
      done();
    });
  });

  it('read specific application by mc_uuid', function(done) {
    application.get({mc_uuid: 'dac25e44d1024f3b819978ed62d209a1'}, {first: true}, function(err, doc) {
      assert.ok(!err);
      assert.ok(!Array.isArray(doc));
      done();
    });
  });

  it('read specific application by id and without option first=true', function(done) {
    application.get({id: 1}, {first: false}, function(err, docs) {
      assert.ok(!err);
      assert.ok(Array.isArray(docs));
      assert.ok(docs.length == 1)
      done();
    });
  });

  //Accept application tests
  it('accepting an application saves the result properly', function(done) {
    data.delete({}, 'application', false, function(err) {
      let input = {
        mc_ign: 'The__TxT',
        discord_id: '293029505457586175', //Non existent discord_id, as we dont want to trigger the accept_worklow
        email_address: 'bogus@nonexistent.eu',
        country: 'Germany',
        birth_month: 2,
        birth_year: 2000,
        about_me: 'This got generated by automating testing',
        motivation: 'I just want to test if everything works properly',
        build_images: 'None, as Im a computer',
        publish_about_me: true,
        publish_age: true,
        publish_country: true,
        accept_privacy_policy: true,
        accept_rules: true
      };
      application.save(input, false, function(status, res) {
        application.save({id: 1, status: 3, reason: 'no'}, false, function(status, res) {
          application.get({id: 1}, {first: true}, function(err, doc) {
            assert.ok(!err);
            assert.ok(doc);
            assert.equal(doc.status, 3);
            done();
          });
        });
      });
    });
  });

  it('accepting an application emits the event correctly', function(done) {
    data.delete({}, 'application', false, function(err) {
      let input = {
        mc_ign: 'The__TxT',
        discord_id: '293029505457586175', //Non existent discord_id, as we dont want to trigger the accept_worklow
        email_address: 'bogus@nonexistent.eu',
        country: 'Germany',
        birth_month: 2,
        birth_year: 2000,
        about_me: 'This got generated by automating testing',
        motivation: 'I just want to test if everything works properly',
        build_images: 'None, as Im a computer',
        publish_about_me: true,
        publish_age: true,
        publish_country: true,
        accept_privacy_policy: true,
        accept_rules: true
      };
      application.save(input, false, function(status, res) {
        application.save({id: 1, status: 3, reason: 'no'}, false, function(status, res) {
          let event_fired = false;
          let doc;

          setTimeout(function() {
            if(event_fired) {
              assert.ok(doc);
              assert.equal(doc.id, 1);
              done();
            } else {
              assert(false);
              done();
            }
          }, 1000)

          console.log(emitter.listenerCount('application_accepted'))
          emitter.once('application_accepted', function(_doc) {
            console.log('event emitted')
            event_fired = true;
            doc = _doc
          });

          emitter.once('application_accepted', done);

          console.log(emitter.listenerCount('application_accepted'))


        });
      });
    });
  });

  it('acceptWorkflow executes all neccessary steps', function(done) {
    done();
  });

  //Deny application tests
  it('denying an application saves the result properly', function(done) {
    done();
  });

  it('denying an application emits the event correctly', function(done) {
    done();
  });
});

